library(DBI)
library(odbc)
#library(data.table,warn.conflicts = FALSE)
library(shinydashboard)
library(ggplot2)
library(pool)
library(dbplyr)
library(dplyr)
library(shiny)
library(DBI)
library(odbc)
#library(data.table,warn.conflicts = FALSE)
library(shinydashboard)
library(ggplot2)
library(pool)
library(dbplyr)
library(dplyr)
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
shiny::runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
shiny::runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
enddate  <- input$enddate+1
heatdata <- trips_db  %>%
barsdata <- trips_db  %>%
filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = hour(tpep_dropoff_datetime),Day= day(tpep_dropoff_datetime)) %>% show_query()
trips_db  %>%
mutate(Hour_Range = hour(tpep_dropoff_datetime),Day= day(tpep_dropoff_datetime)) %>% show_query()
trips_db  %>%
mutate(Hour_Range = DatePart("hh",tpep_dropoff_datetime),Day= DatePart("d",tpep_dropoff_datetime)) %>% show_query()
trips_db  %>%
mutate(Hour_Range = DatePart("hh",tpep_dropoff_datetime),Day= DatePart("dw",tpep_dropoff_datetime))
trips_db  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>% show_query()
trips_db  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime))
trips_db  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>% select(Day,Hour_Range)
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(tip_amount)
heatdata <- trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount))
heatdata
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range =
case_when(Hour_Range >=  1 & Hour_Range <= 4 ~ "1AM-5AM"),
TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range =
case_when(Hour_Range >=  1 && Hour_Range <= 4 ~ "1AM-5AM"),
TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range_X =
case_when(Hour_Range >=  1 && Hour_Range <= 4 ~ "1AM-5AM"),
TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range_X =
case_when(Hour_Range >=  1 ~ "1AM-5AM"),
TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range_X =
case_when(Hour_Range >  1 ~ "1AM-5AM"),
TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range_X =case_when(Hour_Range >  1 ~ "1AM-5AM"),TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range_X = case_when(Hour_Range >  1 ~ "1AM-5AM"),TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range = DatePart(hh,tpep_dropoff_datetime),Day= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range,Day) %>%
summarise(Avg_Tip = mean(tip_amount))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw ==  1 ~ "1AM-5AM"))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw ==  20 ~ "1AM-5AM"),TRUE ~ as.character(Hour_Range))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw ==  20 ~ "1AM-5AM"),TRUE ~ as.character(Hour_Range_Raw))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw ==  20 ~ "1AM-5AM"))#,TRUE ~ as.character(Hour_Range_Raw))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw >= 1 & Hour_Range_Raw <= 4 ~ "1AM-5AM"))#,TRUE ~ as.character(Hour_Range_Raw))
trips_db  %>%
# filter(tpep_dropoff_datetime >= input$startdate,tpep_dropoff_datetime < enddate,
#        trip_distance >= input$trip_distance[1],trip_distance <= input$trip_distance[2])  %>%
mutate(Hour_Range_Raw = DatePart(hh,tpep_dropoff_datetime),Day_Raw= DatePart(dw,tpep_dropoff_datetime)) %>%
group_by(Hour_Range_Raw,Day_Raw) %>%
summarise(Avg_Tip = mean(tip_amount)) %>%
mutate(Hour_Range = case_when(Hour_Range_Raw >= 1 & Hour_Range_Raw <= 4 ~ "1AM-5AM",
Hour_Range_Raw >= 5 & Hour_Range_Raw <= 8 ~ "5AM-9AM",
Hour_Range_Raw >= 9 & Hour_Range_Raw <= 11 ~ "9AM-12PM",
Hour_Range_Raw >= 12 & Hour_Range_Raw <= 15 ~ "12PM-4PM",
Hour_Range_Raw >= 16 & Hour_Range_Raw <= 17 ~ "4PM-6PM",
Hour_Range_Raw >= 18 & Hour_Range_Raw <= 21 ~ "6PM-10PM",
Hour_Range_Raw >= 22 | Hour_Range_Raw < 1 ~ "10PM-1AM"
)
)
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-06.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-06.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-07.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-07.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-08.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-08.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-09.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-09.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-10.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-10.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-11.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-11.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-12.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-12.csv")
runApp('R_UG_Demo/Cab_Explorer')
shiny::runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
shiny::runApp('R_UG_Demo/Cab_Explorer')
shiny::runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
runApp('R_UG_Demo/Cab_Explorer')
unlink('R_UG_Demo/01-Presentation/Presentation_cache', recursive = TRUE)
View(results)
mydud <- "con"
mydud <- "con"
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
trusted_connection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
library(odbc)
library(DBI)
library(ggplot2)
install.packages(c('odbc','DBI','ggplot2','shiny'))
con <- dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
library(odbc)
library(DBI)
con <- dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <- dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\oldsnapper',Database = 'Test' ,Trusted_Connection='yes')
myquery <- paste0("DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,-",input$cpu_slider,",Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);
")
mydata <- dbGetQuery(con,myquery)
install.packages(c("DBI", "ggplot2", "odbc"))
install.packages(c("DBI", "ggplot2", "odbc"))
dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\oldsnapper',Database = 'Test' ,Trusted_Connection='yes')
library(DBI)
dbConnect(drv = odbc:odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
library(shiny); runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
library(odbc)
library(DBI)
library(ggplot2)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
library(DBI)
library(ggplot2)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
myquery <- paste0("DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,-",input$cpu_slider,",Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);
")
mydata <- dbGetQuery(con,myquery)
mydata <- dbGetQuery(con,'Select 1')
mydata
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
library(DBI)
library(ggplot2)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman,2050',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
library(DBI)
sessionInfo()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes' )
dbDisconnect(con)
dbDisconnect(con)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes' )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',Port = 2750 )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Master',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select 1')#myquery)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select 1')#myquery)
dbDisconnect(con)
mydata
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select Getdate()')#myquery)
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
library(shiny); runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
.Library
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbConnect
showMethods("dbConnect")
showMethods("dbConnect")
library(DBI)
dbConnect <- function(drv, Driver ,Server,Database ,Trusted_Connection){
1+1
}
library(DBI)
dbConnect <- function(){
1+1
}
dbConnect()
dbConnect()
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
DBI:dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
DBI::dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
Sys.sleep(5)
1+1
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
Sys.sleep(2)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
srcfile("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowdbConnect.R")
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,"Select Getdate()")
con
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
con
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
browser()
return(conn)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
conn
conn
conn
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
browser()
return(conn)
}
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
return(conn)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
srcfile("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowdbConnect.R")
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
knitr::opts_chunk$set(echo = TRUE)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
library(profvis)
library(profvis)
library(Profvis)
library(profvis)
library(profvis)
install.packages('profvis')
install.packages('Rtools')
library(profvis)
library(profvis)
library(profvis)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
install.packages("pool")
devtools::install_github('rstudio/shinyloadtest')
install.packages("devtools")
devtools::install_github('rstudio/shinyloadtest')
devtools::install_github('rstudio/shinyloadtest')
devtools::install_github('rstudio/shinyloadtest')
runApp('R_UG_Demo/01-SQL_SAT_Presentation')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
library(pool)
runApp('R_UG_Demo/01-SQL_SAT_Presentation/2_poolApp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/2_poolApp.R')

dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
library(DBI)
library(ggplot2)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'np:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
myquery <- paste0("DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,-",input$cpu_slider,",Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);
")
mydata <- dbGetQuery(con,myquery)
mydata <- dbGetQuery(con,'Select 1')
mydata
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
library(DBI)
library(ggplot2)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
dbDisconnect(con)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman,2050',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',port = 2050 )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
library(DBI)
sessionInfo()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes' )
dbDisconnect(con)
dbDisconnect(con)
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman,2050',Database = 'Test',Trusted_Connection='yes' )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes' )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes',Port = 2750 )
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Master',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select 1')#myquery)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select 1')#myquery)
dbDisconnect(con)
mydata
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
mydata <- dbGetQuery(con,'Select Getdate()')#myquery)
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
library(DBI)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')#myquery)
library(shiny); runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
.Library
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
dbDisconnect(con)
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = 'tcp:.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,'Select Getdate()')
dbDisconnect(con)
gc()
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\oldsnapper',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbConnect
showMethods("dbConnect")
showMethods("dbConnect")
library(DBI)
dbConnect <- function(drv, Driver ,Server,Database ,Trusted_Connection){
1+1
}
library(DBI)
dbConnect <- function(){
1+1
}
dbConnect()
dbConnect()
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
DBI:dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
DBI::dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
Sys.sleep(5)
1+1
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
Sys.sleep(2)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
srcfile("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowdbConnect.R")
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
dbGetQuery(con,"Select Getdate()")
con
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
con
con <-  dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
con
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
browser()
return(conn)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
conn
conn
conn
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
browser()
return(conn)
}
library(DBI)
dbConnect <- function(drv,Driver,Server,Database,Trusted_Connection){
Sys.sleep(2)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database,Trusted_Connection=Trusted_Connection)
return(conn)
}
dbConnect(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
srcfile("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowdbConnect.R")
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
knitr::opts_chunk$set(echo = TRUE)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
library(profvis)
library(profvis)
library(Profvis)
library(profvis)
library(profvis)
install.packages('profvis')
install.packages('Rtools')
library(profvis)
library(profvis)
library(profvis)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
install.packages("pool")
devtools::install_github('rstudio/shinyloadtest')
install.packages("devtools")
devtools::install_github('rstudio/shinyloadtest')
devtools::install_github('rstudio/shinyloadtest')
devtools::install_github('rstudio/shinyloadtest')
runApp('R_UG_Demo/01-SQL_SAT_Presentation')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R')
library(pool)
runApp('R_UG_Demo/01-SQL_SAT_Presentation/2_poolApp.R')
runApp('R_UG_Demo/01-SQL_SAT_Presentation/2_poolApp.R')
library(shiny); runApp('Demos/01-BaseApp/01-Start/app1.R')
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = '.\\snapman',
Database = 'Test')
library(shiny)
library(DBI)
library(odbc)
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = '.\\snapman',
Database = 'Test')
con
myquery
myquery <- "
DECLARE @ts_now BIGINT = (
SELECT cpu_ticks / (cpu_ticks / ms_ticks)
FROM sys.dm_os_sys_info WITH (NOLOCK)
);
SELECT TOP (256) DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time],
100 - SystemIdle                                     AS [CPU_Utilization]
FROM (
SELECT record.value(''(./Record/@id)[1]'', ''int'')                                                   AS record_id,
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]'', ''int'')         AS [SystemIdle],
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]'', ''int'') AS [SQLProcessUtilization],
[timestamp]
FROM (
SELECT [timestamp],
CONVERT(XML, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N''RING_BUFFER_SCHEDULER_MONITOR''
AND record LIKE N''%<SystemHealth>%''
) AS x
) AS y
ORDER BY record_id DESC
OPTION (RECOMPILE);
"
dbGetQuery(con,myquery)
dbExecute(con,myquery)
dbExecute(con,myquery)
myquery <- "DECLARE @ts_now BIGINT = (
SELECT cpu_ticks / (cpu_ticks / ms_ticks)
FROM sys.dm_os_sys_info WITH (NOLOCK)
);
SELECT TOP (256) DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time],
100 - SystemIdle                                     AS [CPU_Utilization]
FROM (
SELECT record.value(''(./Record/@id)[1]'', ''int'')                                                   AS record_id,
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]'', ''int'')         AS [SystemIdle],
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]'', ''int'') AS [SQLProcessUtilization],
[timestamp]
FROM (
SELECT [timestamp],
CONVERT(XML, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N''RING_BUFFER_SCHEDULER_MONITOR''
AND record LIKE N''%<SystemHealth>%''
) AS x
) AS y
ORDER BY record_id DESC
OPTION (RECOMPILE);
"
dbGetQuery(con,myquery)
dbGetQuery(con,"Select 1")
myquery <- "DECLARE @ts_now BIGINT = (
SELECT cpu_ticks / (cpu_ticks / ms_ticks)
FROM sys.dm_os_sys_info WITH (NOLOCK)
);
SELECT TOP (256) DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time],
100 - SystemIdle                                     AS [CPU_Utilization]
FROM (
SELECT record.value(''(./Record/@id)[1]'', ''int'')                                                   AS record_id,
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]'', ''int'')         AS [SystemIdle],
record.value(''(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]'', ''int'') AS [SQLProcessUtilization],
[timestamp]
FROM (
SELECT [timestamp],
CONVERT(XML, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N''RING_BUFFER_SCHEDULER_MONITOR''
AND record LIKE N''%<SystemHealth>%''
) AS x
) AS y
ORDER BY record_id DESC
OPTION (RECOMPILE);"
dbGetQuery(con,myquery)
myquery <- "DECLARE @ts_now BIGINT = (
SELECT cpu_ticks / (cpu_ticks / ms_ticks)
FROM sys.dm_os_sys_info WITH (NOLOCK)
);
SELECT TOP (256) DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time],
100 - SystemIdle                                     AS [CPU_Utilization]
FROM (
SELECT record.value('(./Record/@id)[1]', 'int')                                                   AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')         AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int') AS [SQLProcessUtilization],
[timestamp]
FROM (
SELECT [timestamp],
CONVERT(XML, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%'
) AS x
) AS y
ORDER BY record_id DESC
OPTION (RECOMPILE);"
dbGetQuery(con,myquery)
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
library(ggplot2)
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
mydata <- dbGetQuery(con,myquery)
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/01-BaseApp/01-Start/app1.R')
runApp('Demos/02-Connections/01-Start/01-slowapp.R')
gc()
gc()
runApp('Demos/02-Connections/01-Start/01-slowapp1.R')
runApp('Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('Demos/03-ErrorHandling/02-End/01-errorhandle.R')
1+1
n <- 1+1
n
n
n
n
n
n
n
n
n
n
n
n
n
n
library(odbc)
library(DBI)
my_ui <- fluidPage(sidebarPanel(sliderInput("cpu_slider","Minutes Back",0,256,256))
, mainPanel(plotOutput("cpuPlot")))
my_server <- function(input, output) {
output$cpuPlot <- renderPlot({
con <- dbConnect(drv = odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test' ,Trusted_Connection='yes')
myquery <- paste0("Execute dbo.getCPUutilization ",input$cpu_slider)
mydata <- dbGetQuery(con,myquery)
dbDisconnect(con)
ggplot(mydata,aes(Event_Time,CPU_Utilization)) + geom_line()
})
}
shinyApp(ui = my_ui, server = my_server)
runApp('Demos/01-BaseApp/02-End')
runApp('Demos/01-BaseApp/02-End')
dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = '.\\snapman',
Database = 'Test',
Trusted_Connection = TRUE)
dbDisconnect(con)
runApp('Demos/01-BaseApp/02-End')
runApp('Demos/01-BaseApp/02-End')
runApp('Demos/01-BaseApp/02-End')
library(DBI)
dbConnect <- function(drv,Driver,Server,Database){
Sys.sleep(2)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database)
return(conn)
}
#profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
runApp('Demos/01-BaseApp/02-End')
runApp('Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('Demos/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('Demos/05-CacheDemo/01-Start/01-NoCache.R')
runApp('Demos/05-CacheDemo/02-End/01-Cached.R')
runApp('Demos/05-CacheDemo/02-End/01-Cached.R')
runApp('Demos/05-CacheDemo/01-Start/01-NoCache.R')
2201*1000/2120
2201*500/2120
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
myquery <- "Execute dbo.GetCPUutilization"
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = '.\\snapman',
Database = 'Test')
con
myquery <- "Execute dbo.GetCPUutilization"
dbGetQuery(con,myquery)
dbConnect(con)
runApp('Demos/01-BaseApp/01-Start')
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = '.\\snapman',
Database = 'Test')
myquery <- "Execute dbo.GetCPUutilization"
dbGetQuery(con,myquery)
dbConnect(con)
runApp('Demos/01-BaseApp/01-Start')
dbGetQuery(con,myquery)
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
runApp('Demos/01-BaseApp/01-Start')
mydata
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
runApp('Demos/01-BaseApp/01-Start')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-Start/01-slowapp.R')
runApp('Demos/02-Connections/01-Start/01-slowapp.R')
library(pool)
library(pool)
runApp('Demos/02-Connections/01-Start/01-slowapp1.R')
runApp('Demos/05-CacheDemo/01-Start/01-NoCache1.R')
runApp('Demos - Reset/01-BaseApp/02-End')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
myquery
sqlInterpolate(con,myquery,.dots =c(cpuParam <- input$cpuSlider))
con
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
library(shiny); runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('Demos - Reset/02-Connections/02-End/01-slowapp.R')
runApp('Demos - Reset/02-Connections/01-Start/01-slowapp.R')
runApp('Demos - Reset/02-Connections/01-Start/01-slowapp.R')
runApp('Demos - Reset/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('Demos - Reset/05-CacheDemo/02-End/01-Cached.R')
library(profvis)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-Start/01-slowApp.R"))
runApp('Demos/02-Connections/01-Start/01-slowapp.R')
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-Start/01-slowApp.R"))
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/02-End/01-poolApp.R"))
runApp('Demos/05-CacheDemo/01-Start/01-NoCache.R')
library(shinyloadtest)
record_session('http://127.0.0.1:5516/')
df <- load_runs("50_workersCached2" = "./test-logs-2019-08-08T03_23_50.468Z")
df <- load_runs("50_workersCached2" = "C:/Users/mshar/OneDrive/Old/Documents/test-logs-2019-08-08T03_23_50.468Z")
shinyloadtest_report(df, "run4.html")
library(DBI)
dbConnect <- function(drv,Driver,Server,Database){
Sys.sleep(1.5)
conn <<- DBI::dbConnect(drv = drv,  Driver = Driver ,Server = Server,Database = Database)
return(conn)
}
#profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/slowapp.R"))
shiny::runApp('Demos/01-BaseApp/01-Start')
sidePannel
library(shiny)
library(DBI)
library(odbc)
sidePannel
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
myquery <- "Execute dbo.GetCPUutilization"
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = myserver,
Database = 'Test')
dbGetQuery(con,myquery)
library(shiny)
library(DBI)
library(odbc)
myserver<- ifelse(Sys.info()["nodename"]=="INFRA035",'.','.\\snapman')
myquery <- "Execute dbo.GetCPUutilization"
con <- dbConnect(drv = odbc(),
Driver = 'Sql Server',
Server = myserver,
Database = 'Test')
dbGetQuery(con,myquery)
mydata <- dbGetQuery(con,myquery)
ggplot2::ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
library(ggplot2)
ggplot(mydata,aes(Event_Time,CPU_Utilization))+geom_line()
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
runApp('Demos/01-BaseApp/01-Start')
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-Start/01-slowApp.R"))
library(profvis)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-Start/01-slowApp.R"))
runApp('Demos/02-Connections/01-Start/01-slowapp.R')

library(shiny); runApp('slowapp.R')
runApp('slowapp.R')
library(profvis)
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/SampleApps/slowapp.R"))
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/slowapp.R"))
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/01-slowapp.R"))
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/SampleApps/2_poolApp.R')
runApp('02-End/01-poolApp.R')
myquery <- "DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,-?cpuSlider,Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);"
myquery <- sqlInterpolate(con,myquery,.dots=c(cpuSlider <- input$cpu_slider))
library(DBI)
library(ggplot2)
library(pool)
con <-  dbPool(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')
myquery <- "DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,-?cpuSlider,Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);"
myquery <- sqlInterpolate(con,myquery,.dots=c(cpuSlider <- input$cpu_slider))
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
con
myquery
input$cpu_slider
myqueryint <- sqlInterpolate(con,myquery,.dots= c(minRange <- input$cpu_slider))
myqueryint <- sqlInterpolate(con,myquery,.dots= c(minRange <- input$cpu_slider))
dbGetQuery(con,myquery)
myqueryint
myquery
myquery <- "DECLARE @ts_now bigint = (SELECT cpu_ticks/(cpu_ticks/ms_ticks) FROM sys.dm_os_sys_info WITH (NOLOCK));
SELECT TOP(256)   DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) AS [Event_Time] ,
100 - SystemIdle AS [CPU_Utilization]
FROM (SELECT record.value('(./Record/@id)[1]', 'int') AS record_id,
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/SystemIdle)[1]', 'int')
AS [SystemIdle],
record.value('(./Record/SchedulerMonitorEvent/SystemHealth/ProcessUtilization)[1]', 'int')
AS [SQLProcessUtilization], [timestamp]
FROM (SELECT [timestamp], CONVERT(xml, record) AS [record]
FROM sys.dm_os_ring_buffers WITH (NOLOCK)
WHERE ring_buffer_type = N'RING_BUFFER_SCHEDULER_MONITOR'
AND record LIKE N'%<SystemHealth>%') AS x) AS y
Where DATEADD(ms, -1 * (@ts_now - [timestamp]), GETDATE()) >= DATEADD(minute,- ?minRange ,Getdate())
ORDER BY record_id DESC OPTION (RECOMPILE);"
myqueryint <- sqlInterpolate(con,myquery,.dots= c(minRange <- input$cpu_slider))
myqueryint <- sqlInterpolate(con,myquery,.dots=c(minRange <- input$cpu_slider))
con
sqlInterpolate(con,query,.dots=c(minRange=input$minutesRange))
sqlInterpolate(con,myquery,.dots=c(minRange=input$minutesRange))
myqueryint <- sqlInterpolate(con,myquery,.dots=c(minRange=input$cpu_slider))
runApp('02-End/01-poolApp.R')
runApp('02-End/01-poolApp.R')
profvis(runApp("C:/Users/mshar/OneDrive/Old/Documents/R_UG_Demo/01-SQL_SAT_Presentation/Demos/02-Connections/02-End/01-poolApp.R"))
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/01-Start/01-errorprone.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
con
con
dbGetQuery(con,myqueryint)
con
dbGetQuery(con,myqueryint)
dbGetQuery(con,myqueryint)
dbGetQuery(con,'Select Getdate()')
dbGetQuery(con,'Select Getdate()')
dbGetQuery(con,'Select Getdate()')
dbGetQuery(con,'Select Getdate()')
e$message
e
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
e
dbGetQuery(con,myqueryint)
dbGetQuery(con,myqueryint)
dbGetQuery(con,'Select Getdate()')
dbGetQuery(con,'Select Getdate()')
e
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
makeCon <- function(){
tryCatch({
dbPool(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')},
error = function(e){
showModal(modalDialog('Connection Error'))
})
}
con<-makeCon()
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
e
e$message
grep('Communication link failure',e$message)
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
library(DBI)
library(ggplot2)
library(pool)
makeCon <- function(){
tryCatch({
dbPool(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')},
error = function(e){
showModal(modalDialog('Connection Error'))
})
}
makeCon()
dbIsValid(makeCon())
dbIsValid(makeCon())
dbIsValid(makeCon())
con<-makeCon()
dbIsValid(con)
dbIsValid(con)
dbIsValid(con)
dbIsValid(con)
dbIsValid(con)
dbIsValid(con)
dbIsValid(con)
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
dbGetQuery(con,"Select 1")
makeCon <- function(){
tryCatch({
dbPool(drv = odbc::odbc(),  Driver = 'Sql Server',Server = '.\\snapman',Database = 'Test',Trusted_Connection='yes')},
error = function(e){
#showModal(modalDialog('Connection Error'))
})
}
makeCon()
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/03-ErrorHandling/02-End/01-errorhandle.R')
runApp('~/R_UG_Demo/01-SQL_SAT_Presentation/Demos/05-CacheDemo/02-End/01-Cached.R')

trips_db <- tbl(con, "yellow_tripdata_2018-01")
tips_fsf %>%
filter(tpep_dropoff_datetime >= '2018-01-02 07:28:00',tpep_dropoff_datetime <= '2018-01-02 07:30:00') %>%
summarise(pcount= n())
tips_fsf %>%
filter(tpep_dropoff_datetime >= '2018-01-02 07:28:00',tpep_dropoff_datetime <= '2018-01-02 07:30:00') %>%
summarise(pcount= n())
tips_fs %>%
filter(tpep_dropoff_datetime >= '2018-01-02 07:28:00',tpep_dropoff_datetime <= '2018-01-02 07:30:00') %>%
summarise(pcount= n())
trips_fs %>%
filter(tpep_dropoff_datetime >= '2018-01-02 07:28:00',tpep_dropoff_datetime <= '2018-01-02 07:30:00') %>%
summarise(pcount= n())
trips_db %>%
filter(tpep_dropoff_datetime >= '01-02-2018 13:28',tpep_dropoff_datetime <= '01/02/2018 13:30')  %>%
summarise(pcount= n())
trips_db %>%
filter(tpep_dropoff_datetime >= '01-02-2018 13:28',tpep_dropoff_datetime <= '01/02/2018 13:30')  %>%
summarise(pcount= n())
fs<- function(){trips_fs %>%
filter(tpep_dropoff_datetime >= '2018-01-02 07:28:00',tpep_dropoff_datetime <= '2018-01-02 07:30:00') %>%
summarise(pcount= n())}
db<- function(){trips_db %>%
filter(tpep_dropoff_datetime >= '01-02-2018 13:28',tpep_dropoff_datetime <= '01/02/2018 13:30')  %>%
summarise(pcount= n())}
microbenchmark(print(db()),print(fs()),times = 10)
library(microbenchmark)
microbenchmark(print(db()),print(fs()),times = 10)
dbExecute(con,'CREATE NONCLUSTERED INDEX nc_yellow_trip_tpep_dropoff_datetime
ON [yellow_tripdata_2018-01](tpep_dropoff_datetime)')
microbenchmark(print(db()),print(fs()),times = 10)
dbExecute(con,"DROP INDEX IF EXISTS nc_yellow_trip_tpep_dropoff_datetime ON [yellow_tripdata_2018-01] ")
microbenchmark(print(db()),print(fs()),times = 10)
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
trusted_connection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
myUserid <- 'Cab_App'
myPassword <- Sys.getenv('Cab_App_Password')
connection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Uid = myUserid,Pwd = myPassword)
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
trusted_connection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(myconnection,"Select GetDate()")
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
library(DBI)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(myconnection,"Select GetDate()")
dbDisconnect(myconnection)
dbGetQuery(myconnection,"Select GetDate()")
dbGetQuery(myconnection,"Select GetDate()")
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate,\'leakedquery\' as c1,",i))
}
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
gc()
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
leakedcns
#knitr::kable(leakedcns), format = 'html')
```
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns, format = 'html')
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[1])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[2])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[3])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[1])
dbGetQuery(poolcon,queries[2])
dbGetQuery(poolcon,queries[3])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 5)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[1])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[2])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[3])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[1])
dbGetQuery(poolcon,queries[2])
dbGetQuery(poolcon,queries[3])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 5)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
for(i in 1:length(queries))
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[i])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
length(queries)
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
knitr::kable(results, format = 'html')
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results
results
knitr::kable(results, format = 'html')
results
results[1]
class(results)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- as.data.frame(microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10))
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
#poolClose(poolcon)
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
knitr::kable(results, format = 'html')
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
results
knitr::kable(results, format = 'html')
kable(results)
knitr::kable(results)
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
knitr::kable(leakedcns, format = 'html')
gc()
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
library(shiny)
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny")
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny")
getwd()
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("InjectionApp", package="shiny")
system.file("InjectionApp", package="shiny")
system.file("InjectionApp/", package="shiny")
system.file("examples/01_hello", package="shiny")
system.file("examples/01_hello", package="shiny")
getwd()
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
library(shiny)
shinyAppDir(
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp"),
#system.file("/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp"),
#system.file("/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
system.file("examples/01_hello", package="shiny"),
options = list(width = "100%", height = 700)
)
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
data()
head(starwars)
## Load Data
con <- dbConnect(odbc(),Driver = 'SQL Server',Server = '.\\snapman', Database = 'Cab_Demo', trusted_connection = TRUE)
if(dbExistsTable(con, "starwars")){dbRemoveTable(con , 'starwars')}
dbCreateTable(con,'starwars',starwars)
dbWriteTable(con,'startwars',startwars)
dbWriteTable(con,'starwars',starwars)
dbWriteTable(con,'starwars',starwars,append=true)
dbWriteTable(con,'starwars',starwars,append=TRUE)
head(starwars)
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-05.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-05.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-05.csv")
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
trips_fs
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
head(trips_fs)
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(trips_fs, format = 'html')
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',tips_fs)
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
dbDisconnect(con)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
if(dbExistsTable(poolcon, "yellow_trip_summary_model"))
{dbRemoveTable(con , 'yellow_trip_summary_model')}
if(dbExistsTable(poolcon, "yellow_trip_summary_model"))
{dbRemoveTable(poolcon , 'yellow_trip_summary_model')}
dbCreateTable(poolcon,'yellow_trip_summary_model',trips_fs)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
if(dbExistsTable(con, "yellow_trip_summary_model"))
{dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <-
readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 3)
trips_fs
library(kableExtra)
library(kableExtra)
gc()
options(htmltools.dir.version = FALSE)
library(DBI)
library(dbplyr)
library(tidyverse)
library(kableExtra)
install.packages('kableExtra')

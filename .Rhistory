shiny::runApp()
library(DBI)
library(shiny)
library(odbc)
library(pool)
library(shiny)
library(shinyjs)
myDriver <- 'SQL Server' # Localhost can be referred to with .
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myPool <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer, Database = myDatabase,Trusted_Connection='yes')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getOption("shiny.port")
runApp()
runApp(port = 80)
shiny::runApp()
runApp()
runApp()
runApp()
remotes::install_github('yihui/xaringan')
install.packages('xaringan')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
emails <- dbGetQuery(myPool,'Select email From dbo.Persons')
emails
selectInput('titled','Search for Email to Edit',c("Select One"= '',emails))
emails
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(stringr)
runApp()
emailwhitelist <- "^[[:alnum:].-_]+@[[:alnum:].-]+$"
str_match(input$title, emailwhitelist)
str_match(input$title, emailwhitelist)
input$title
input$email
str_match(input$email, emailwhitelist)
runApp()
runApp()
emailwhitelist <- "^[[:alnum:].-_]+@[[:alnum:].-]+$"
str_match(input$email, emailwhitelist
)
if(str_match(input$email, emailwhitelist)){print(1)}
is.na(input$email, emailwhitelist)
if(is.na(str_match(input$email, emailwhitelist))){print(1}
if(is.na(str_match(input$email, emailwhitelist))){print(1)}
if(is.na(str_match(input$email, emailwhitelist))){print(1)}
if(!is.na(str_match(input$email, emailwhitelist))){print(1)}
if(!is.na(str_match(input$email, emailwhitelist))){print(1)}
if(!is.na(str_match(input$email, emailwhitelist))){print(1)}
if(!is.na(str_match(input$email, emailwhitelist))){print(1)}
if(!is.na(str_match(input$email, emailwhitelist))){print(1)}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
e$message
grep('PRIMARY KEY constraint',e$message)
grep('PRIMARY KEY constraint',e$message)
grep('PRIMARY KEY constraint',e$message)
if(grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
e$message
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
if(grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
if(grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
if(grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
else{h5(e$message)}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')}
else{e$message}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
if(!grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
runApp()
runApp()
e$message
if(grep('PRIMARY KEY constraint',e$message)){h5('Email Already Exists')} else{e$message}
if(grep('PRIMARY KEY constraint',e$message==1)){h5('Email Already Exists')} else{e$message}
if(grep('PRIMARY KEY constraint',e$message==1)){h5('Email Already Exists')} else{e$message}
if(grep('PRIMARY KEY constraint',e$message1)==1){h5('Email Already Exists')} else{e$message}
grep('PRIMARY KEY constraint',e$message1)
grep('PRIMARY KEY constraint',e$message1)==1
grep('PRIMARY KEY constraint',e$message1)==1
grep('PRIMARY KEY constraint',e$message1)==1
grep('PRIMARY KEY constraint',e$message1)==1
grep('PRIMARY KEY constraint',e$message1)==1
grep('PRIMARY KEY constraint',e$message1)==1
class(grep('PRIMARY KEY constraint',e$message1)))
class(grep('PRIMARY KEY constraint',e$message1))
grep('PRIMARY KEY constraint',e$message1))
grep('PRIMARY KEY constraint',e$message1)
grep('Valid',e$message)
e$message
grep('valid',e$message)
grep('valid',e$message) == 1
grep('valid',e$message) == 0
grep('fu',e$message) == 1
grep('fu',e$message,value = TRUE)
nrow(grep('fu',e$message))
nrow(grep('fu',e$message))
nrow(grep('valid',e$message))
nrow(grep('valid',e$message))
nrow(grep('valid',e$message))
length(grep('valid',e$message))
length(grep('valid',e$message))
e$message
length(grep('valid email',e$message))
length(grep('valid email',e$message))
length(grep('fef',e$message))
length(grep('fef',e$message))
runApp()
file.exists('C:\Users\MaSharkey\OneDrive - HDR, Inc\shinybuilder\shinybuilderInjection.gif')
file.exists('C:/Users/MaSharkey/OneDrive - HDR, Inc/shinybuilder/shinybuilderInjection.gif')
library(DBI)
knitr::opts_chunk$set(echo = TRUE)
myDriver <- 'SQL Server'
# Use . for a local connection, otherwise specify Server Machine Name or IP address
myServer <- './/snapman'
myDatabase <- 'Cab_Demo'
if(file.exists('C:/Users/MaSharkey/OneDrive - HDR, Inc/shinybuilder/shinybuilderInjection.gif')){
setwd('C:/Users/MaSharkey/OneDrive - HDR, Inc/shinybuilder/')} else {
setwd('C:/')
}
trusted_connection <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')

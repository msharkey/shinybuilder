Trusted_Connection='yes')
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
gc()
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
leakedcns
#knitr::kable(leakedcns), format = 'html')
```
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns), format = 'html')
knitr::kable(leakedcns, format = 'html')
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[1])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[2])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[3])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[1])
dbGetQuery(poolcon,queries[2])
dbGetQuery(poolcon,queries[3])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 5)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[1])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[2])
dbDisconnect(con)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database =myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[3])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[1])
dbGetQuery(poolcon,queries[2])
dbGetQuery(poolcon,queries[3])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 5)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
for(i in 1:length(queries))
dbpoolworkload <- function() {
dbGetQuery(poolcon,queries[i])
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
length(queries)
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
knitr::kable(results, format = 'html')
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results
results
knitr::kable(results, format = 'html')
results
results[1]
class(results)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- as.data.frame(microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10))
poolClose(poolcon)
results
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
poolClose(poolcon)
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
#poolClose(poolcon)
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
knitr::kable(results, format = 'html')
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
results
knitr::kable(results, format = 'html')
kable(results)
knitr::kable(results)
for (i in 1:5)
{
myconnection <- dbConnect(odbc::odbc(),Driver= myDriver
,Server = myServer,Database = myDatabase
,Trusted_Connection='yes')
date <- dbGetQuery(myconnection,paste("Select GetDate() as mydate
,\'leakedquery\' as c1,",i))
}
knitr::kable(leakedcns, format = 'html')
gc()
options(htmltools.dir.version = FALSE)
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
library(shiny)
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny")
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp", package="shiny")
getwd()
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("/InjectionApp", package="shiny")
system.file("InjectionApp", package="shiny")
system.file("InjectionApp", package="shiny")
system.file("InjectionApp/", package="shiny")
system.file("examples/01_hello", package="shiny")
system.file("examples/01_hello", package="shiny")
getwd()
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
system.file("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp")
library(shiny)
shinyAppDir(
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp"),
#system.file("/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
list.files("C:/Users/mshar/OneDrive/Documents/R_UG_Demo/InjectionApp"),
#system.file("/InjectionApp", package="shiny"),
options = list(width = "100%", height = 700)
)
library(shiny)
shinyAppDir(
system.file("examples/01_hello", package="shiny"),
options = list(width = "100%", height = 700)
)
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
runApp('InjectionApp')
data()
head(starwars)
## Load Data
con <- dbConnect(odbc(),Driver = 'SQL Server',Server = '.\\snapman', Database = 'Cab_Demo', trusted_connection = TRUE)
if(dbExistsTable(con, "starwars")){dbRemoveTable(con , 'starwars')}
dbCreateTable(con,'starwars',starwars)
dbWriteTable(con,'startwars',startwars)
dbWriteTable(con,'starwars',starwars)
dbWriteTable(con,'starwars',starwars,append=true)
dbWriteTable(con,'starwars',starwars,append=TRUE)
head(starwars)
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-05.csv")
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-05.csv"
download.file(url,"D:/Cab_Data/yellow_tripdata_2018-05.csv")
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
trips_fs
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
head(trips_fs)
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(trips_fs, format = 'html')
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',tips_fs)
trips_fs <- read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv',n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
dbDisconnect(con)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
library(DBI)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
myconnection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
poolcon <- dbPool(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
if(dbExistsTable(poolcon, "yellow_trip_summary_model"))
{dbRemoveTable(con , 'yellow_trip_summary_model')}
if(dbExistsTable(poolcon, "yellow_trip_summary_model"))
{dbRemoveTable(poolcon , 'yellow_trip_summary_model')}
dbCreateTable(poolcon,'yellow_trip_summary_model',trips_fs)
con <- dbConnect(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
if(dbExistsTable(con, "yellow_trip_summary_model"))
{dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <- readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 10)
knitr::kable(head(trips_fs,n=3L), format = 'html')
trips_fs <-
readr::read_csv('D:/Cab_Data/yellow_tripdata_2018-01.csv'
,n_max = 3)
trips_fs
library(kableExtra)
library(kableExtra)
gc()
options(htmltools.dir.version = FALSE)
library(DBI)
library(dbplyr)
library(tidyverse)
library(kableExtra)
install.packages('kableExtra')
url <- "https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_2018-12.csv"
download.file(url,"C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv")
library(dbplyr)
library(odbc)
library(DBI)
library(microbenchmark)
library(tidyverse)
## Load Data
con <- dbConnect(odbc(),Driver = 'SQL Server',Server = '.\\snapman', Database = 'Cab_Demo', trusted_connection = TRUE)
trips_fs <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',n_max = 10)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',tips_fs)
trips_fs <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',n_max = 10)
if(dbExistsTable(con, "yellow_trip_summary_model")){dbRemoveTable(con , 'yellow_trip_summary_model')}
dbCreateTable(con,'yellow_trip_summary_model',trips_fs)
trips_fsf <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',10)
dbWriteTable(con,"yellow_trip_summary",tips_fsf,append =TRUE)
## Each Row is inserted one at a time, not fast at all
trips_fsf <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',10)
dbWriteTable(con,"yellow_trip_summary",trips_fsf,append =TRUE)
trips_fsf <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',10)
trips_fsf <- read_csv('C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv',n_max = 10)
dbWriteTable(con,"yellow_trip_summary",trips_fsf,append =TRUE)
dbWriteTable(con,"yellow_tripdata_2018-01",trips_fsf,append =TRUE)
Sys.info()
Sys.info(nodename)
Sys.info()$nodename
comp <- Sys.info()
comp
comp$nodename
comp[3]
comp[4]
comp["nodename"]
if(comp["nodename"]=="OMC-5CG6151GZF"){print 1}
if(comp["nodename"]=="OMC-5CG6151GZF"){print 1}
if(comp["nodename"]=="OMC-5CG6151GZF"){print "hey"}
if(comp["nodename"]=="OMC-5CG6151GZF"){print("hey")}
options(htmltools.dir.version = FALSE)
library(DBI)
library(dbplyr)
library(tidyverse)
library(kableExtra)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
comp <- Sys.info()
if(comp["nodename"]=="OMC-5CG6151GZF"){
cab_fileloc <- "C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv"} else {
cab_fileloc <- "D:/Cab_data/yellow_tripdata_2018-01.csv"
}
library(pool)
queries <- c("SELECT Getdate()","Select Getdate()","Select Getdate()","Select Getdate()")
dbconnectworkload <- function() {
for(i in 1:length(queries)){
con <- {{dbConnect}}(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbGetQuery(con,queries[i])
dbDisconnect(con)
}
}
poolcon <- {{dbPool}}(odbc::odbc(),Driver= myDriver,Server = myServer
,Database = myDatabase,Trusted_Connection='yes')
dbpoolworkload <- function() {
for(i in 1:length(queries)){dbGetQuery(poolcon,queries[i])}
}
results <- microbenchmark::microbenchmark(dbconnectworkload()
,dbpoolworkload(),times = 10)
options(htmltools.dir.version = FALSE)
library(DBI)
library(dbplyr)
library(tidyverse)
library(kableExtra)
library(microbenchmark)
myDriver <- 'SQL Server'
myServer <- '.\\snapman'
myDatabase <- 'Cab_Demo'
sqlchunk_connection <- dbConnect(odbc::odbc(),
Driver= myDriver,
Server = myServer,
Database = myDatabase,
Trusted_Connection='yes')
comp <- Sys.info()
if(comp["nodename"]=="OMC-5CG6151GZF"){
cab_fileloc <- "C:/Users/MaSharkey/Cab_Data/yellow_tripdata_2018-12.csv"} else {
cab_fileloc <- "D:/Cab_data/yellow_tripdata_2018-01.csv"
}
getwd()
library(xaringan)
exists("trips_fs")
exists("trips_db")
background-image: url(https://images.unsplash.com/photo-1534224039826-c7a0eda0e6b3?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ)
background-image: url('https://images.unsplash.com/photo-1534224039826-c7a0eda0e6b3?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ')
background-image: url("https://images.unsplash.com/photo-1534224039826-c7a0eda0e6b3?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ")
background-image: url(https://upload.wikimedia.org/wikipedia/commons/b/be/Sharingan_triple.svg)
![](C:/Users\MaSharkey/OneDrive - HDR, Inc/shinybuilder/israel-palacio-778505-unsplash.jpg)
